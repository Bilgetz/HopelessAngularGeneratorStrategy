package fr.hopelessworld.plugin.strategy.impl;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.Validate;

import fr.hopelessworld.plugin.analyzer.AnalizedEntity;
import fr.hopelessworld.plugin.strategy.GeneratorStrategy;
import fr.hopelessworld.plugin.utils.AnalizedEntityUtils;

public class AngularSpringDataRestCustomControllerStrategy implements GeneratorStrategy {

	/** The Constant BASE_PACKAGE. */
	private final static String BASE_PACKAGE = "fr.hopelessworld.autogenerated";

	@Override
	public void generate(File baseDirectory, Collection<AnalizedEntity> entities) throws IOException {
		File baseGenerateDirectory = new File(baseDirectory, BASE_PACKAGE.replace('.', '/'));
		if (!baseGenerateDirectory.exists()) {
			baseGenerateDirectory.mkdirs();
			baseGenerateDirectory.mkdir();
		}
		this.createEntitySpecification(baseGenerateDirectory);
		this.createEntitySpecificationBuilder(baseGenerateDirectory);
		this.createSearchCriteria(baseGenerateDirectory);

		this.createRestControllers(baseGenerateDirectory, entities);

	}

	/**
	 * Creates the entity specification.
	 *
	 * @param baseGenerateDirectory
	 *            the base generate directory
	 * @throws IOException
	 *             Signals that an I/O exception has occurred.
	 */
	private void createEntitySpecification(File baseGenerateDirectory) throws IOException {
		File entitySpecificationDirectory = new File(baseGenerateDirectory, "specification");
		if (!entitySpecificationDirectory.exists()) {
			entitySpecificationDirectory.mkdir();
		}
		InputStream templateStream = this.getClass().getResourceAsStream("/EntitySpecification.template");
		Validate.notNull(templateStream, "template don't exist");
		int avaible = templateStream.available();
		Validate.isTrue(avaible > 0, "template is empty");

		String template = IOUtils.toString(templateStream);
		IOUtils.closeQuietly(templateStream);

		template = template.replace("{{basePackage}}", BASE_PACKAGE);

		Path pathEntitySpecification = Paths.get(entitySpecificationDirectory.getAbsolutePath(),
				"EntitySpecification.java");

		List<String> toCopy = new ArrayList<String>();
		toCopy.add(template);
		Files.write(pathEntitySpecification, toCopy);

	}

	private void createEntitySpecificationBuilder(File baseGenerateDirectory) throws IOException {
		File entitySpecificationDirectory = new File(baseGenerateDirectory, "builder");
		if (!entitySpecificationDirectory.exists()) {
			entitySpecificationDirectory.mkdir();
		}
		InputStream templateStream = this.getClass().getResourceAsStream("/EntitySpecificationsBuilder.template");
		Validate.notNull(templateStream, "template don't exist");
		int avaible = templateStream.available();
		Validate.isTrue(avaible > 0, "template is empty");

		String template = IOUtils.toString(templateStream);
		IOUtils.closeQuietly(templateStream);

		template = template.replace("{{basePackage}}", BASE_PACKAGE);

		Path pathEntitySpecification = Paths.get(entitySpecificationDirectory.getAbsolutePath(),
				"EntitySpecificationsBuilder.java");

		List<String> toCopy = new ArrayList<String>();
		toCopy.add(template);
		Files.write(pathEntitySpecification, toCopy);

	}

	private void createSearchCriteria(File baseGenerateDirectory) throws IOException {
		File serachCriteriaDirectory = new File(baseGenerateDirectory, "specification");
		if (!serachCriteriaDirectory.exists()) {
			serachCriteriaDirectory.mkdir();
		}
		InputStream templateStream = this.getClass().getResourceAsStream("/SearchCriteria.template");
		Validate.notNull(templateStream, "template don't exist");
		int avaible = templateStream.available();
		Validate.isTrue(avaible > 0, "template is empty");

		String template = IOUtils.toString(templateStream);
		IOUtils.closeQuietly(templateStream);

		template = template.replace("{{basePackage}}", BASE_PACKAGE);

		Path pathEntitySpecification = Paths.get(serachCriteriaDirectory.getAbsolutePath(), "SearchCriteria.java");

		List<String> toCopy = new ArrayList<String>();
		toCopy.add(template);
		Files.write(pathEntitySpecification, toCopy);
	}

	private void createRestControllers(File baseGenerateDirectory, Collection<AnalizedEntity> entities)
			throws IOException {
		File serachCriteriaDirectory = new File(baseGenerateDirectory, "controller");
		if (!serachCriteriaDirectory.exists()) {
			serachCriteriaDirectory.mkdir();
		}
		InputStream templateStream = this.getClass().getResourceAsStream("/RestController.template");
		Validate.notNull(templateStream, "template don't exist");
		int avaible = templateStream.available();
		Validate.isTrue(avaible > 0, "template is empty");

		String template = IOUtils.toString(templateStream);
		IOUtils.closeQuietly(templateStream);

		for (AnalizedEntity analizedEntity : entities) {
			String entityName = analizedEntity.getSimpleName();
			String fileName = entityName + "RestController.java";

			Path pathRestController = Paths.get(serachCriteriaDirectory.getAbsolutePath(), fileName);
			List<String> toCopy = new ArrayList<String>();
			String finaleTemplate = this.generateRestController(analizedEntity, template);
			toCopy.add(finaleTemplate);
			Files.write(pathRestController, toCopy);
		}

	}

	private String generateRestController(final AnalizedEntity entity, final String template) throws IOException {
		String entityName = entity.getSimpleName();
		String entityImport = entity.getPackageName() + "." + entityName;

		String finaleTemplate = template.replace("{{basePackage}}", BASE_PACKAGE);
		finaleTemplate = finaleTemplate.replace("{{entityImport}}", entityImport);
		finaleTemplate = finaleTemplate.replace("{{entity}}", entityName);
		finaleTemplate = finaleTemplate.replace("{{path}}",
				AnalizedEntityUtils.getEntitiesName(entityName).toLowerCase());

		return finaleTemplate;
	}

}
